# third-party imports
import pandas as pd

# project imports
from commons.stats import get_abs_values
from commons.stats import get_value_counts

# local imports
from .constants import GENERATE_NETWORK
from .constants import ERROR_STATE
from .constants import END_STATE
from .constants import SEVERITY_LABELS
from .constants import RISK_LABELS


def fix_vulnerability(env):

    # loading env values

    current_rep = env['current_rep']
    vulns_to_fix = env['fix_vulns_per_rep']

    cvss_stats = env['stats']['cvss']
    frape_stats = env['stats']['frape']

    cvss_sorted = cvss_stats['vulns_sorted']
    frape_sorted = frape_stats['vulns_sorted']

    # flow control

    if current_rep > env['rep']:
        return (END_STATE, env)

    if len(cvss_sorted) < vulns_to_fix or len(frape_sorted) < vulns_to_fix:
        env = {**env, 'errors': ['Not enough vulnerabilities to fix.']}
        return (ERROR_STATE, env)

    # retrieving vulnerabilities

    cvss_before_fix = pd.DataFrame.from_records(env['cvss_vulnerabilities'])
    frape_before_fix = pd.DataFrame.from_records(env['frape_vulnerabilities'])

    # fixing vulnerabilities

    cvss_remaining_vulns = cvss_sorted[vulns_to_fix:]
    frape_remaining_vulns = frape_sorted[vulns_to_fix:]

    cvss_after_fix = cvss_before_fix.loc[cvss_before_fix['cve_id'].isin(cvss_remaining_vulns)]
    frape_after_fix = frape_before_fix.loc[frape_before_fix['cve_id'].isin(frape_remaining_vulns)]

    # updating vulnerabilities list

    cvss_vulnerabilities = cvss_after_fix.to_dict(orient='records')
    frape_vulnerabilities = frape_after_fix.to_dict(orient='records')

    # summarizing results

    cvss_base_severity = get_value_counts(cvss_after_fix, 'base_severity', SEVERITY_LABELS)
    cvss_risk_score = get_value_counts(cvss_after_fix, 'risk_score', RISK_LABELS)

    frape_base_severity = get_value_counts(frape_after_fix, 'base_severity', SEVERITY_LABELS)
    frape_risk_score = get_value_counts(frape_after_fix, 'risk_score', RISK_LABELS)

    env = {
        **env,
        'current_rep': env['current_rep'] + 1,
        'cvss_vulnerabilities': cvss_vulnerabilities,
        'frape_vulnerabilities': frape_vulnerabilities,
        'stats': {
            'cvss': {
                'vulns_sorted': cvss_remaining_vulns,
                'base_severity': [*cvss_stats['base_severity'], cvss_base_severity],
                'risk_score': [*cvss_stats['risk_score'], cvss_risk_score],
                'abs_values': [*cvss_stats['abs_values'], get_abs_values(cvss_after_fix)]
            },
            'frape': {
                'vulns_sorted': frape_remaining_vulns,
                'base_severity': [*frape_stats['base_severity'], frape_base_severity],
                'risk_score': [*frape_stats['risk_score'], frape_risk_score],
                'abs_values': [*frape_stats['abs_values'], get_abs_values(frape_after_fix)]
            }
        }
    }

    return (GENERATE_NETWORK, env)
