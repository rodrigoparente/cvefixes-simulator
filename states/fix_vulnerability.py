# third-party imports
import pandas as pd

# project imports
from commons.data import get_stats

# local imports
from .constants import FIX_VULNERABILITY
from .constants import ERROR_STATE
from .constants import END_STATE


def fix_vulnerability(env):

    curr_rep = env['curr_rep']
    vulns_to_fix = env['fix_vulns_per_rep']

    if curr_rep == env['rep'] + 1:
        del env['curr_rep']
        return (END_STATE, env)

    cvss_sorted = env['iterations'][curr_rep]['cvss_sorted']
    frape_sorted = env['iterations'][curr_rep]['frape_sorted']

    if len(cvss_sorted) < vulns_to_fix:
        env = {**env, 'errors': ['Not enough vulnerabilities to fix.']}
        return (ERROR_STATE, env)

    cvss_sorted = cvss_sorted[vulns_to_fix:]
    frape_sorted = frape_sorted[vulns_to_fix:]

    df = pd.DataFrame.from_records(env['vulnerabilities'])

    cvss_df = df.loc[df['cve_id'].isin(cvss_sorted)]
    frape_df = df.loc[df['cve_id'].isin(frape_sorted)]

    env['curr_rep'] += 1

    env['iterations'].setdefault(env['curr_rep'], {
        'cvss_sorted': cvss_sorted,
        'frape_sorted': frape_sorted,
        'stats_cvss': get_stats(cvss_df),
        'stats_frape': get_stats(frape_df),
    })

    return (FIX_VULNERABILITY, env)
