# python imports
import pandas as pd

# project imports
from commons.stats import get_abs_values
from commons.stats import get_value_counts

# local imports
from .constants import FIX_VULNERABILITY
from .constants import SEVERITY_LABELS
from .constants import RISK_LABELS


def prioritize_vulnerability(env):

    # not the first iteration and
    # there is no new vulnerabilities
    if env['current_rep'] > 1 and \
            env['new_vulns_per_rep'] == 0:
        return (FIX_VULNERABILITY, env)

    cvss_vulns = pd.DataFrame.from_records(env['cvss_vulnerabilities'])
    frape_vulns = pd.DataFrame.from_records(env['frape_vulnerabilities'])

    # sort by CVSS

    cvss_vulns = cvss_vulns.sort_values(by=['base_score'], ascending=False)

    # sort by FRAPE

    frape_vulns['risk_score'] = pd.Categorical(
        frape_vulns.risk_score,
        categories=['LOW', 'MODERATE', 'IMPORTANT', 'CRITICAL'], ordered=True)

    frape_vulns = frape_vulns.sort_values(
        by=['risk_score', 'risk_proba'], ascending=[False, False])

    # sumarizing results

    cvss_stats = dict()
    frape_stats = dict()

    if env['current_rep'] > 1:
        cvss_stats = env['stats']['cvss']
        frape_stats = env['stats']['frape']
    else:
        cvss_stats = {
            'base_severity': [get_value_counts(cvss_vulns, 'base_severity', SEVERITY_LABELS)],
            'risk_score': [get_value_counts(cvss_vulns, 'risk_score', RISK_LABELS)],
            'abs_values': [get_abs_values(cvss_vulns)]
        }

        frape_stats = {
            'base_severity': [get_value_counts(frape_vulns, 'base_severity', SEVERITY_LABELS)],
            'risk_score': [get_value_counts(frape_vulns, 'risk_score', RISK_LABELS)],
            'abs_values': [get_abs_values(frape_vulns)]
        }

    env = {
        **env,
        'cvss_vulnerabilities': cvss_vulns.to_dict(orient='records'),
        'frape_vulnerabilities': frape_vulns.to_dict(orient='records'),
        'stats': {
            'cvss': {
                **cvss_stats
            },
            'frape': {
                **frape_stats
            }
        }
    }

    return (FIX_VULNERABILITY, env)
