# python imports
import pandas as pd

# project imports
from commons.stats import get_stats

# local imports
from .constants import FIX_VULNERABILITY


def prioritize_vulnerability(env):

    # not the first iteration and
    # there is no new vulnerabilities
    if env['current_rep'] > 1 and \
            env['new_vulns_per_rep'] == 0:
        return (FIX_VULNERABILITY, env)

    cvss_vulns = pd.DataFrame.from_records(env['cvss_vulnerabilities'])
    frape_vulns = pd.DataFrame.from_records(env['frape_vulnerabilities'])

    # sort by CVSS
    cvss_sorted = cvss_vulns.sort_values(by=['base_score'], ascending=False)
    cvss_sorted = cvss_sorted['cve_id'].tolist()

    # sort by FRAPE
    frape_vulns['risk_score'] = pd.Categorical(
        frape_vulns.risk_score,
        categories=['LOW', 'MODERATE', 'IMPORTANT', 'CRITICAL'], ordered=True)

    frape_sorted = frape_vulns.sort_values(
        by=['risk_score', 'risk_proba'], ascending=[False, False])
    frape_sorted = frape_sorted['cve_id'].tolist()

    cvss_stats = list()
    frape_stats = list()

    if env['current_rep'] > 1:
        cvss_stats = env['iterations']['cvss_stats']
        frape_stats = env['iterations']['frape_stats']
    else:
        cvss_stats = [get_stats(cvss_vulns)]
        frape_stats = [get_stats(frape_vulns)]

    env = {
        **env,
        'iterations': {
            'cvss_sorted': cvss_sorted,
            'frape_sorted': frape_sorted,
            'cvss_stats': cvss_stats,
            'frape_stats': frape_stats
        }
    }

    return (FIX_VULNERABILITY, env)
