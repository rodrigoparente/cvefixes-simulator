# third-party imports
import pandas as pd

# project imports
from commons.file import load_model
from commons.data import encode_data

# local imports
from .constants import FIX_VULNERABILITY
from .constants import ERROR_STATE


def classify_vulnerability(env):

    learner = load_model(env['model']['learner'])

    if not learner:
        env = {**env, 'errors': ['Learner not found.']}
        return (ERROR_STATE, env)

    errors = list()

    for vuln in env['vulnerabilities']:
        df = pd.DataFrame.from_records([vuln])
        df.drop(columns=['cve_id', 'base_severity', 'asset_id'], inplace=True)

        df = encode_data(df)
        df = df.to_numpy()

        try:
            predicted = learner.predict(df)[0]
        except ValueError:
            errors.append(f"Could not predict risk for vuln {vuln['cve_id']}")

        # TODO: get probability value

        risk_labels = ['LOW', 'MODERATE', 'IMPORTANT', 'CRITICAL']
        vuln['risk_score'] = risk_labels[predicted]

    if len(errors) > 0:
        env = {**env, 'errors': errors}
        return (ERROR_STATE, env)

    return (FIX_VULNERABILITY, env)
