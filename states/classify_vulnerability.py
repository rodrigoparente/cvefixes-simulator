# python imports
import pickle

# third-party imports
import pandas as pd

# local imports
from .constants import FIX_VULNERABILITY
from .constants import ERROR_STATE
from .constants import RISK_LABELS
from .utils import transform_data


def classify_vulnerability(env):
    learner = pickle.load(open(env['model']['learner'], 'rb'))

    errors = list()

    for vuln in env['vulnerabilities']:
        data = pd.DataFrame.from_records([vuln])
        data.drop(columns=['cve_id', 'base_severity', 'asset_id'], inplace=True)

        data = transform_data(data)
        data = data.to_numpy()

        try:
            predicted = learner.predict(data)[0]
        except ValueError:
            errors.append(f"Could not predict risk for vuln {vuln['cve_id']}")

        # TODO: get probability value

        vuln['risk_score'] = RISK_LABELS[predicted]

    if len(errors) > 0:
        env = {**env, 'errors': errors}
        return (ERROR_STATE, env)

    return (FIX_VULNERABILITY, env)
